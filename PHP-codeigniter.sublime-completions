{
  "scope": "source.php - variable.other.php",

  "completions":
  [
    "php",
    // Benchmarking class
    { "trigger": "$ci->benchmark->mark", "contents": "\\$this->benchmark->mark(${1:marker_name})" },
    { "trigger": "$ci->benchmark->elapsed_time", "contents": "\\$this->benchmark_elapsed_time(${1:code_start}, ${2:code_end})" },
    { "trigger": "$ci->benchmark->memory_usage", "contents": "\\$this->benchmark->memory_usage()" },
    // Calendar class
    { "trigger": "$ci->calendar->generate", "contents": "\\$this->calendar->generate(${1:arguments})" },
    // Cart Class
    { "trigger": "$ci->cart->insert", "contents": "\\$this->cart->insert(${1:data})" },
    { "trigger": "$ci->cart->update", "contents": "\\$this->cart->update(${1:data})" },
    { "trigger": "$ci->cart->total", "contents": "\\$this->cart->total()" },
    { "trigger": "$ci->cart->total_items", "contents": "\\$this->cart->total_items()" },
    { "trigger": "$ci->cart->contents", "contents": "\\$this->cart->contents()" },
    { "trigger": "$ci->cart->has_options", "contents": "\\$this->cart->has_options(${1:rowid})" },
    { "trigger": "$ci->cart->product_options", "contents": "\\$this->cart->product_options(${1:rowid})" },
    { "trigger": "$ci->cart->destroy", "contents": "\\$this->cart->destroy()" },
    // Config Class
    { "trigger": "$ci->config->load", "contents": "\\$this->config->load(${1:filename})" },
    { "trigger": "$ci->config->item", "contents": "\\$this->config->item(${1:item_name})" },
    { "trigger": "$ci->config->set_item", "contents": "\\$this->config->set_item(${1:item_name}, ${2:item_value})" },
    { "trigger": "$ci->config->site_url", "contents": "\\$this->config->site_url()" },
    { "trigger": "$ci->config->base_url", "contents": "\\$this->config->base_url()" },
    { "trigger": "$ci->config->system_url", "contents": "\\$this->config->system_url()" },
    // Email Class
    { "trigger": "$ci->email->from", "contents": "\\$this->email->from(${1:you@example.com}, ${2:Your_Name})" },
    { "trigger": "$ci->email->reply_to", "contents": "\\$this->email->reply_to(${1:you@example.com}, ${2:Your_Name})" },
    { "trigger": "$ci->email->to", "contents": "\\$this->email->to(${1:recipient(s)})" },
    { "trigger": "$ci->email->cc", "contents": "\\$this->email->cc(${1:recipient(s)})" },
    { "trigger": "$ci->email->bcc", "contents": "\\$this->email->bcc(${1:recipient(s)})" },
    { "trigger": "$ci->email->subject", "contents": "\\$this->email->subject(${1:subject})" },
    { "trigger": "$ci->email->message", "contents": "\\$this->email->message(${1:message})" },
    { "trigger": "$ci->email->set_alt_message", "contents": "\\$this->email->set_alt_message(${1:alternative_no_HTML_message})" },
    { "trigger": "$ci->email->clear", "contents": "\\$this->email->clear()" },
    { "trigger": "$ci->email->send", "contents": "\\$this->email->send()" },
    { "trigger": "$ci->email->attach", "contents": "\\$this->email->attach(${1:path_to_attachment})" },
    { "trigger": "$ci->email->print_debugger", "contents": "\\$this->email->print_debugger()" },
    // Encryption Class
    { "trigger": "$ci->encrypt->encode", "contents": "\\$this->encrypt->encode(${1:msg_to_encrypt})" },
    { "trigger": "$ci->encrypt->decode", "contents": "\\$this->encrypt->decode(${1:encrypted_string})" },
    { "trigger": "$ci->encrypt->set_cipher", "contents": "\\$this->encrypt->set_cipher(${1:cipher})" },
    { "trigger": "$ci->encrypt->set_mode", "contents": "\\$this->encrypt->set_mode(${1:mode})" },
    { "trigger": "$ci->encrypt->sha1", "contents": "\\$this->encrypt->sha1(${1:string})" },
    { "trigger": "$ci->encrypt->encode_from_legacy", "contents": "\\$this->encrypt->encode_from_legacy(${1:old_encrypted_string})" },
    // File Uploading Class
    { "trigger": "$ci->upload->do_upload", "contents": "\\$this->upload->do_upload(${1:field_name})" },
    { "trigger": "$ci->upload->display_errors", "contents": "\\$this->upload->display_errors(${1:custom_delimiters})" },
    { "trigger": "$ci->upload->data", "contents": "\\$this->upload->data()" },
    // Form Validation Class
    { "trigger": "$ci->form_validation->set_rules", "contents": "\\$this->form_validation->set_rules()" },
    { "trigger": "$ci->form_validation->run", "contents": "\\$this->form_validation->run()" },
    { "trigger": "$ci->form_validation->set_message", "contents": "\\$this->form_validation->set_message()" },
    // FTP Class
    { "trigger": "$ci->ftp->connect", "contents": "\\$this->ftp->connect(${1:\\$config})" },
    { "trigger": "$ci->ftp->upload", "contents": "\\$this->ftp->upload(${1:local_path}, ${2:remote_path})" },
    { "trigger": "$ci->ftp->download", "contents": "\\$this->ftp->download(${1:remote_path}, ${2:local_path})" },
    { "trigger": "$ci->ftp->rename", "contents": "\\$this->ftp->rename(${1:source_file}, ${2:new_file})" },
    { "trigger": "$ci->ftp->delete_file", "contents": "\\$this->ftp->delete_file(${source_path_with_filename})" },
    { "trigger": "$ci->ftp->delete_dir", "contents": "\\$this->ftp->delete_dir(${directory_to_delete_with_trailing_slash})" },
    { "trigger": "$ci->ftp->list_files", "contents": "\\$this->ftp->list_files(${1:path})" },
    { "trigger": "$ci->ftp->mkdir", "contents": "\\$this->ftp->mkdir(${1:path_to_create}, ${2:destination_path})" },
    { "trigger": "$ci->ftp->chmod", "contents": "\\$this->ftp->chmod(${1:path}, ${2:permissions})" },
    { "trigger": "$ci->ftp->close", "contents": "\\$this->ftp->close()" },
    // HTML Table Class
    { "trigger": "$ci->table->close", "contents": "\\$this->table->close()" },
    { "trigger": "$ci->table->set_caption", "contents": "\\$this->table->set_caption(${1:caption})" },
    { "trigger": "$ci->table->set_heading", "contents": "\\$this->table->set_heading(${1:heading(array_or_discrete_parameters)})" },
    { "trigger": "$ci->table->add_row", "contents": "\\$this->table->add_row(${1:row(array_or_discrete_parameters))" },
    { "trigger": "$ci->table->make_columns", "contents": "\\$this->table->make_columns(${1:array}, ${2:number_of_columns})" },
    { "trigger": "$ci->table->set_template", "contents": "\\$this->table->set_template(${1:template})" },
    { "trigger": "$ci->table->set_empty", "contents": "\\$this->table->set_empty(${1:value})" },
    { "trigger": "$ci->table->clear", "contents": "\\$this->table->clear()" },
    { "trigger": "$ci->table->function", "contents": "\\$this->table->function(${1:function})" },
    // Image Manipulation Class
    { "trigger": "$ci->image_lib->initialize", "contents": "\\$this->image_lib->initialize(${1:$config})" },
    { "trigger": "$ci->image_lib->resize", "contents": "\\$this->image_lib->resize()" },
    { "trigger": "$ci->image_lib->crop", "contents": "\\$this->image_lib->crop()" },
    { "trigger": "$ci->image_lib->rotate", "contents": "\\$this->image_lib->rotate()" },
    { "trigger": "$ci->image_lib->watermark", "contents": "\\$this->image_lib->watermark()" },
    { "trigger": "$ci->image_lib->clear", "contents": "\\$this->image_lib->clear()" },
    { "trigger": "$ci->image_lib->display_errors", "contents": "\\$this->image_lib->display_errors(${1:custom_delimiters})" },
    // Input Class
    { "trigger": "$ci->input->post", "contents": "\\$this->input->post(${1:$some_data})" },
    { "trigger": "$ci->input->get", "contents": "\\$this->input->get(${1:$some_data})" },
    { "trigger": "$ci->input->get_post", "contents": "\\$this->input->get_post(${1:$some_data})" },
    { "trigger": "$ci->input->cookie", "contents": "\\$this->input->cookie(${1:$some_data})" },
    { "trigger": "$ci->input->ip_address", "contents": "\\$this->input->ip_address()" },
    { "trigger": "$ci->input->valid_ip", "contents": "\\$this->input->valid_ip(${1:$ip})" },
    { "trigger": "$ci->input->user_agent", "contents": "\\$this->input->user_agent()" },
    { "trigger": "$ci->input->request_headers", "contents": "\\$this->input->request_headers()" },
    { "trigger": "$ci->input->get_request_headers", "contents": "\\$this->input->get_request_headers()" },
    { "trigger": "$ci->input->is_ajax_request", "contents": "\\$this->input->is_ajax_request()" },
    { "trigger": "$ci->input->is_cli_request", "contents": "\\$this->input->is_cli_request()" },
    // Javascript Class
    { "trigger": "$ci->jquery->event", "contents": "\\$this->jquery->event(${1:element_path}, ${2:code_to_run()})" },
    { "trigger": "$ci->jquery->hide", "contents": "\\$this->jquery->hide(${1:target})" },
    { "trigger": "$ci->jquery->toggle", "contents": "\\$this->jquery->toggle(${1:target})" },
    { "trigger": "$ci->jquery->animate", "contents": "\\$this->jquery->animate(${1:parameters})" },
    { "trigger": "$ci->jquery->fadeIn", "contents": "\\$this->jquery->fadeIn(${1:target})" },
    { "trigger": "$ci->jquery->fadeOut", "contents": "\\$this->jquery->fadeOut(${1:target})" },
    { "trigger": "$ci->jquery->slideUp", "contents": "\\$this->jquery->slideUp(${1:target})" },
    { "trigger": "$ci->jquery->slideDown", "contents": "\\$this->jquery->slideDown(${1:target})" },
    { "trigger": "$ci->jquery->slideToggle", "contents": "\\$this->jquery->slideToggle(${1:target})" },
    { "trigger": "$ci->load->library", "contents": "\\$this->load->library(${1:'class_name', \\$config, 'object name'})" },
    // Loader Class
    { "trigger": "$ci->load->view", "contents": "\\$this->load->view(${1:view}${2:, ${3:\\$data}, ${4:true}})" },
    { "trigger": "$ci->load->model", "contents": "\\$this->load->model(${1:'${2:model_name}'})" },
    { "trigger": "$ci->load->database", "contents": "\\$this->load->database(${1:options, true})" },
    { "trigger": "$ci->load->vars", "contents": "\\$this->load->vars(${1:array})" },
    { "trigger": "$ci->load->get_var", "contents": "\\$this->load->get_var(${1:key})" },
    { "trigger": "$ci->load->helper", "contents": "\\$this->load->helper(${1:'${2:file_name}'})" },
    { "trigger": "$ci->load->file", "contents": "\\$this->load->file(${1:'${2:filepath/filename}'}${3:, true})" },
    { "trigger": "$ci->load->language", "contents": "\\$this->load->language(${1:'${2:file_name}'})" },
    { "trigger": "$ci->load->config", "contents": "\\$this->load->config(${1:'${2:file_name}'})" },
    { "trigger": "$ci->load->driver", "contents": "\\$this->load->driver(${1:driver})" },
    { "trigger": "$ci->load->add_package_path", "contents": "\\$this->load->add_package_path(${1:APPPATH.'third_party/foo_bar/''})" },
    { "trigger": "$ci->load->remove_package_path", "contents": "\\$this->load->remove_package_path(${1:APPPATH.'third_party/foo_bar/'})" },
    // Language Class
    { "trigger": "$ci->lang->load", "contents": "\\$this->lang->load(${1:'filename', 'language'})" },
    { "trigger": "$ci->lang->line", "contents": "\\$this->lang->line(${1:'language_key''})" },
    // Migration Class
    { "trigger": "$ci->migration->current", "contents": "\\$this->migration->current()" },
    { "trigger": "$ci->migration->latest", "contents": "\\$this->migration->latest()" },
    { "trigger": "$ci->migration->version", "contents": "\\$this->migration->version()" },
    // Output Class
    { "trigger": "$ci->output->set_output", "contents": "\\$this->output->set_output()" },
    { "trigger": "$ci->output->set_content_type", "contents": "\\$this->output->set_content_type()" },
    { "trigger": "$ci->output->get_output", "contents": "\\$this->output->get_output()" },
    { "trigger": "$ci->output->append_output", "contents": "\\$this->output->append_output(${1:\\$data})" },
    { "trigger": "$ci->output->set_header", "contents": "\\$this->output->set_header()" },
    { "trigger": "$ci->output->set_status_header", "contents": "\\$this->output->set_status_header(${1:code, 'text'})" },
    { "trigger": "$ci->output->enable_profiler", "contents": "\\$this->output->enable_profiler(${1:TRUE/FALSE})" },
    { "trigger": "$ci->output->set_profiler_sections", "contents": "\\$this->output->set_profiler_sections()" },
    { "trigger": "$ci->output->cache", "contents": "\\$this->output->cache()" },
    { "trigger": "$ci->output->parse_exec_vars = FALSE;", "contents": "" },
    // Pagination Class
    { "trigger": "$ci->pagination->initialize", "contents": "\\$this->pagination->initialize()" },
    { "trigger": "$ci->pagination->create_links", "contents": "\\$this->pagination->create_links()" },
    // Security Class
    { "trigger": "$ci->security->xss_clean", "contents": "\\$this->security->xss_clean(${1:\\$data (or \\$file, TRUE)})" },
    { "trigger": "$ci->security->sanitize_filename", "contents": "\\$this->security->sanitize_filename(${1:file_name})" },
    // Session Class
    { "trigger": "$ci->session->userdata", "contents": "\\$this->session->userdata(${1:'item'})" },
    { "trigger": "$ci->session->xss_clean", "contents": "\\$this->session->xss_clean(${1:'array_index'})" },
    { "trigger": "$ci->session->set_userdata", "contents": "\\$this->session->set_userdata(${1:'${2:name}'}, ${3:'${4:value}'})" },
    { "trigger": "$ci->session->all_userdata", "contents": "\\$this->session->all_userdata()" },
    { "trigger": "$ci->session->unset_userdata", "contents": "\\$this->session->unset_userdata(${1:'some_name' or $array_items})" },
    { "trigger": "$ci->session->set_flashdata", "contents": "\\$this->session->set_flashdata(${1:'item'}, ${2:'value'})" },
    { "trigger": "$ci->session->flashdata", "contents": "\\$this->session->flashdata(${1:'item'})" },
    { "trigger": "$ci->session->keep_flashdata", "contents": "\\$this->session->keep_flashdata(${1:'item'})" },
    { "trigger": "$ci->session->sess_destroy", "contents": "\\$this->session->sess_destroy()" },
    // Trackback Class
    { "trigger": "$ci->trackback->send", "contents": "\\$this->trackback->send(${1:\\$data})" },
    { "trigger": "$ci->trackback->display_errors", "contents": "\\$this->trackback->display_errors()" },
    { "trigger": "$ci->trackback->receive", "contents": "\\$this->trackback->receive()" },
    { "trigger": "$ci->trackback->send_error", "contents": "\\$this->trackback->send_error(${1:'error message'})" },
    { "trigger": "$ci->trackback->send_success", "contents": "\\$this->trackback->send_success()" },
    { "trigger": "$ci->trackback->data", "contents": "\\$this->trackback->data(${1:one of url, title, excerpt or blog_name})" },
    // Template Parser Class
    { "trigger": "$ci->parser->parse", "contents": "\\$this->parser->parse(${1:'blog_template', \\$data, TRUE})" },
    { "trigger": "$ci->parser->parse_string", "contents": "\\$this->parser->parse_string()" },
    // Typography Class
    { "trigger": "$ci->typography->auto_typography", "contents": "\\$this->typography->auto_typography(${1:\\$string, FALSE})" },
    { "trigger": "$ci->typography->format_characters", "contents": "\\$this->typography->format_characters(${1:\\$string})" },
    { "trigger": "$ci->typography->nl2br_except_pre", "contents": "\\$this->typography->nl2br_except_pre(${1:\\$string)" },
    { "trigger": "$ci->typography->protect_braced_quotes = TRUE;", "contents": "" },
    // Unit Testing Class
    { "trigger": "$ci->unit->run", "contents": "\\$this->unit->run(${1:test, expected result, 'test name', 'notes'})" },
    { "trigger": "$ci->unit->report", "contents": "\\$this->unit->report()" },
    { "trigger": "$ci->unit->result", "contents": "\\$this->unit->result()" },
    { "trigger": "$ci->unit->use_strict", "contents": "\\$this->unit->use_strict(${1:TRUE})" },
    { "trigger": "$ci->unit->active", "contents": "\\$this->unit->active(${1:FALSE})" },
    { "trigger": "$ci->unit->set_test_items", "contents": "\\$this->unit->set_test_items(${1:array('test_name', 'result')})" },
    // URI Class
    { "trigger": "$ci->uri->segment", "contents": "\\$this->uri->segment(${1:n})" },
    { "trigger": "$ci->uri->rsegment", "contents": "\\$this->uri->rsegment(${1:n})" },
    { "trigger": "$ci->uri->slash_segment", "contents": "\\$this->uri->slash_segment(${1:n, trailing/leading/both})" },
    { "trigger": "$ci->uri->slash_rsegment", "contents": "\\$this->uri->slash_rsegment(${1:n, trailing/leading/both})" },
    { "trigger": "$ci->uri->uri_to_assoc", "contents": "\\$this->uri->uri_to_assoc(${1:n, \\$default})" },
    { "trigger": "$ci->uri->ruri_to_assoc", "contents": "\\$this->uri->ruri_to_assoc(${1:n, \\$default})" },
    { "trigger": "$ci->uri->assoc_to_uri", "contents": "\\$this->uri->assoc_to_uri(${1:\\$array})" },
    { "trigger": "$ci->uri->uri_string", "contents": "\\$this->uri->uri_string()" },
    { "trigger": "$ci->uri->ruri_string", "contents": "\\$this->uri->ruri_string()" },
    { "trigger": "$ci->uri->total_segments", "contents": "\\$this->uri->total_segments()" },
    { "trigger": "$ci->uri->total_rsegments", "contents": "\\$this->uri->total_rsegments()" },
    { "trigger": "$ci->uri->segment_array", "contents": "\\$this->uri->segment_array()" },
    { "trigger": "$ci->uri->rsegment_array", "contents": "\\$this->uri->rsegment_array()" },
    // User Agent Class
    { "trigger": "$ci->agent->is_browser", "contents": "\\$this->agent->is_browser(${1:browser})" },
    { "trigger": "$ci->agent->is_mobile", "contents": "\\$this->agent->is_mobile()" },
    { "trigger": "$ci->agent->is_referral", "contents": "\\$this->agent->is_referral()" },
    { "trigger": "$ci->agent->browser", "contents": "\\$this->agent->browser()" },
    { "trigger": "$ci->agent->version", "contents": "\\$this->agent->version()" },
    { "trigger": "$ci->agent->mobile", "contents": "\\$this->agent->mobile()" },
    { "trigger": "$ci->agent->robot", "contents": "\\$this->agent->robot()" },
    { "trigger": "$ci->agent->platform", "contents": "\\$this->agent->platform()" },
    { "trigger": "$ci->agent->referrer", "contents": "\\$this->agent->referrer()" },
    { "trigger": "$ci->agent->agent_string", "contents": "\\$this->agent->agent_string()" },
    { "trigger": "$ci->agent->accept_lang", "contents": "\\$this->agent->accept_lang(${1:lang})" },
    { "trigger": "$ci->agent->accept_charset", "contents": "\\$this->agent->accept_charset(${1:charset})" },
    // XML-RPC and XML-RPC Server Classes
    { "trigger": "$ci->xmlrpc->server", "contents": "\\$this->xmlrpc->server(${1:url, port_number})" },
    { "trigger": "$ci->xmlrpc->method", "contents": "\\$this->xmlrpc->method(${1:'method'})" },
    { "trigger": "$ci->xmlrpc->request", "contents": "\\$this->xmlrpc->request(${1:\\$request_array})" },
    { "trigger": "$ci->xmlrpc->send_request", "contents": "\\$this->xmlrpc->send_request()" },
    { "trigger": "$ci->xmlrpc->send_response", "contents": "\\$this->xmlrpc->send_response()" },
    { "trigger": "$ci->xmlrpc->display_error", "contents": "\\$this->xmlrpc->display_error()" },
    { "trigger": "$ci->xmlrpc->send_error_message", "contents": "\\$this->xmlrpc->send_error_message(${1:error_number, error_message})" },
    { "trigger": "$ci->xmlrpc->display_response", "contents": "\\$this->xmlrpc->display_response()" },
    { "trigger": "$ci->xmlrpc->initialize", "contents": "\\$this->xmlrpc->initialize(${1:\\$config})" },
    { "trigger": "$ci->xmlrpc->serve", "contents": "\\$this->xmlrpc->serve()" },
    { "trigger": "$ci->xmlrpc->timeout", "contents": "\\$this->xmlrpc->timeout(${1:seconds})" },
    { "trigger": "$ci->xmlrpc->set_debug", "contents": "\\$this->xmlrpc->set_debug(${1:TRUE})" },
    // Zip Encoding Class
    { "trigger": "$ci->zip->add_data", "contents": "\\$this->zip->add_data(${1:\\$name, \\$data})" },
    { "trigger": "$ci->zip->add_dir", "contents": "\\$this->zip->add_dir(${1:folder_name})" },
    { "trigger": "$ci->zip->read_file", "contents": "\\$this->zip->read_file(${1:\\$path, TRUE})" },
    { "trigger": "$ci->zip->read_dir", "contents": "\\$this->zip->read_dir(${1:\\$path})" },
    { "trigger": "$ci->zip->archive", "contents": "\\$this->zip->archive(${1:/path/to/folder/myarchive.zip})" },
    { "trigger": "$ci->zip->download", "contents": "\\$this->zip->download(${1:'name'})" },
    { "trigger": "$ci->zip->get_zip", "contents": "\\$this->zip->get_zip()" },
    { "trigger": "$ci->zip->clear_data", "contents": "\\$this->zip->clear_data()" },
    // Caching Class
    { "trigger": "$ci->cache->is_supported", "contents": "\\$this->cache->is_supported(${1:driver['string']})" },
    { "trigger": "$ci->cache->get", "contents": "\\$this->cache->get(${1:id['string']})" },
    { "trigger": "$ci->cache->save", "contents": "\\$this->cache->save(${id['string'], data['mixed'], ttl['int']})" },
    { "trigger": "$ci->cache->delete", "contents": "\\$this->cache->delete(${id['string']})" },
    { "trigger": "$ci->cache->clean", "contents": "\\$this->cache->clean()" },
    { "trigger": "$ci->cache->cache_info", "contents": "\\$this->cache->cache_info()" },
    { "trigger": "$ci->cache->get_metadata", "contents": "\\$this->cache->get_metadata(${1:id['string']})" },
    { "trigger": "$ci->cache->apc->is_supported", "contents": "\\$this->cache->apc->is_supported(${1:driver['string']})" },
    { "trigger": "$ci->cache->apc->get", "contents": "\\$this->cache->apc->get(${1:id['string']})" },
    { "trigger": "$ci->cache->apc->save", "contents": "\\$this->cache->apc->save(${id['string'], data['mixed'], ttl['int']})" },
    { "trigger": "$ci->cache->apc->delete", "contents": "\\$this->cache->apc->delete(${id['string']})" },
    { "trigger": "$ci->cache->apc->clean", "contents": "\\$this->cache->apc->clean()" },
    { "trigger": "$ci->cache->apc->cache_info", "contents": "\\$this->cache->apc->cache_info()" },
    { "trigger": "$ci->cache->apc->get_metadata", "contents": "\\$this->cache->apc->get_metadata(${1:id['string']})" },
    { "trigger": "$ci->cache->file->is_supported", "contents": "\\$this->cache->file->is_supported(${1:driver['string']})" },
    { "trigger": "$ci->cache->file->get", "contents": "\\$this->cache->file->get(${1:id['string']})" },
    { "trigger": "$ci->cache->file->save", "contents": "\\$this->cache->file->save(${id['string'], data['mixed'], ttl['int']})" },
    { "trigger": "$ci->cache->file->delete", "contents": "\\$this->cache->file->delete(${id['string']})" },
    { "trigger": "$ci->cache->file->clean", "contents": "\\$this->cache->file->clean()" },
    { "trigger": "$ci->cache->file->cache_info", "contents": "\\$this->cache->file->cache_info()" },
    { "trigger": "$ci->cache->file->get_metadata", "contents": "\\$this->cache->file->get_metadata(${1:id['string']})" },
    { "trigger": "$ci->cache->memcached->is_supported", "contents": "\\$this->cache->memcached->is_supported(${1:driver['string']})" },
    { "trigger": "$ci->cache->memcached->get", "contents": "\\$this->cache->memcached->get(${1:id['string']})" },
    { "trigger": "$ci->cache->memcached->save", "contents": "\\$this->cache->memcached->save(${id['string'], data['mixed'], ttl['int']})" },
    { "trigger": "$ci->cache->memcached->delete", "contents": "\\$this->cache->memcached->delete(${id['string']})" },
    { "trigger": "$ci->cache->memcached->clean", "contents": "\\$this->cache->memcached->clean()" },
    { "trigger": "$ci->cache->memcached->cache_info", "contents": "\\$this->cache->memcached->cache_info()" },
    { "trigger": "$ci->cache->memcached->get_metadata", "contents": "\\$this->cache->memcached->get_metadata(${1:id['string']})" },
    // Database Class
    { "trigger": "$ci->load->database", "contents": "\\$this->load->database(${1:'group_name, TRUE'})" },
    { "trigger": "$ci->db->reconnect", "contents": "\\$this->db->reconnect()" },
    { "trigger": "$ci->db->close", "contents": "\\$this->db->close()" },
    { "trigger": "$ci->db->query", "contents": "\\$this->db->query(${1:'${2:query}'})" },
    { "trigger": "$ci->db->simple_query", "contents": "\\$this->db->simple_query(${1:'${2:query}'})" },
    { "trigger": "$ci->db->db_prefix", "contents": "\\$this->db->db_prefix(${1:'${2:tablename}'})" },
    { "trigger": "$ci->db->set_dbprefix", "contents": "\\$this->db->set_dbprefix(${1:'${2:newprefix}'})" },
    { "trigger": "$ci->db->protect_identifiers", "contents": "\\$this->db->protect_identifiers(${1:'table_name', TRUE})" },
    { "trigger": "$ci->db->escape", "contents": "\\$this->db->escape(${1:\\$title})" },
    { "trigger": "$ci->db->escape_str", "contents": "\\$this->db->escape_str(${1:\\$title})" },
    { "trigger": "$ci->db->escape_like_str", "contents": "\\$this->db->escape_like_str(${1:\\$title})" },
    { "trigger": "$ci->db->insert_id", "contents": "\\$this->db->insert_id()" },
    { "trigger": "$ci->db->affected_rows", "contents": "\\$this->db->affected_rows()" },
    { "trigger": "$ci->db->count_all", "contents": "\\$this->db->count_all(${1:'${2:table}'})" },
    { "trigger": "$ci->db->platform", "contents": "\\$this->db->platform()" },
    { "trigger": "$ci->db->version", "contents": "\\$this->db->version()" },
    { "trigger": "$ci->db->last_query", "contents": "\\$this->db->last_query()" },
    { "trigger": "$exit_last_query", "contents": "r(\\$this->db->last_query());" },
    { "trigger": "$ci->db->insert_string", "contents": "\\$this->db->insert_string(${1:'table_name', \\$data})" },
    { "trigger": "$ci->db->update_string", "contents": "\\$this->db->update_string(${1:'table_name', \\$data, \\$where})" },
    { "trigger": "$ci->db->get", "contents": "\\$this->db->get(${1:\\$table}${2:, ${3:\\$limit}, ${4:\\$offset}})" },
    { "trigger": "$ci->db->get_where", "contents": "\\$this->db->get_where(${1:\\$table}${2:, ${3:\\$where}, ${4:\\$limit}, ${5:\\$offset}})" },
    { "trigger": "$ci->db->select", "contents": "\\$this->db->select(${1:$select})" },
    { "trigger": "$ci->db->select_max", "contents": "\\$this->db->select_max(${1:SELECT MAX(field)})" },
    { "trigger": "$ci->db->select_min", "contents": "\\$this->db->select_min(${1:SELECT MIN(field)})" },
    { "trigger": "$ci->db->select_avg", "contents": "\\$this->db->select_avg(${1:SELECT AVG(field)})" },
    { "trigger": "$ci->db->select_sum", "contents": "\\$this->db->select_sum(${1:SELECT SUM(field)})" },
    { "trigger": "$ci->db->from", "contents": "\\$this->db->from(${1:from})" },
    { "trigger": "$ci->db->where", "contents": "\\$this->db->where(${1:'${2:name}'}${3:, ${4:\\$name}, ${5:FALSE}})"   },
    { "trigger": "$ci->db->or_where", "contents": "\\$this->db->or_where(${1:'name', \\$name, FALSE})" },
    { "trigger": "$ci->db->where_in", "contents": "\\$this->db->where_in(${1:'username', $names})" },
    { "trigger": "$ci->db->or_where_in", "contents": "\\$this->db->or_where_in(${1:'username', $names})" },
    { "trigger": "$ci->db->where_not_in", "contents": "\\$this->db->where_not_in(${1:'username', $names})" },
    { "trigger": "$ci->db->or_where_not_in", "contents": "\\$this->db->or_where_not_in(${1:'username', $names})" },
    { "trigger": "$ci->db->like", "contents": "\\$this->db->like(${1:'${2:title}'}${3:, ${4:'${5:match}'}})" },
    { "trigger": "$ci->db->or_like", "contents": "\\$this->db->or_like(${1:'${2:title}'}${3:, ${4:'${5:match}'}})" },
    { "trigger": "$ci->db->not_like", "contents": "\\$this->db->not_like(${1:'${2:title}'}${3:, ${4:'${5:match}'}})" },
    { "trigger": "$ci->db->or_not_like", "contents": "\\$this->db->or_not_like(${1:'${2:title}'}${3:, ${4:'${5:match}'}})" },
    { "trigger": "$ci->db->group_by", "contents": "\\$this->db->group_by(${1:'${2:title}'})"},
    { "trigger": "$ci->db->distinct", "contents": "\\$this->db->distinct()" },
    { "trigger": "$ci->db->having", "contents": "\\$this->db->having(${1:'user_id = 45'})" },
    { "trigger": "$ci->db->or_having", "contents": "\\$this->db->or_having(${1:'user_id = 45'})" },
    { "trigger": "$ci->db->order_by", "contents": "\\$this->db->order_by(${1:'${2:title}'}${3:, ${4:'${5:desc}'}})" },
    { "trigger": "$ci->db->limit", "contents": "\\$this->db->limit(${1:$limi})" },
    { "trigger": "$ci->db->count_all_results", "contents": "\\$this->db->count_all_results(${1:'${2:table}'})" },
    { "trigger": "$ci->db->count_all", "contents": "\\$this->db->count_all(${1:'${2:table}'})" },
    { "trigger": "$ci->db->insert", "contents": "\\$this->db->insert(${1:'${2:mytable}'}${3:, ${4:\\$data}})" },
    { "trigger": "$ci->db->insert_batch", "contents": "\\$this->db->insert_batch(${1:table, array or object})" },
    { "trigger": "$ci->db->set", "contents": "\\$this->db->set(${1:'field', 'field2', FALSE})" },
    { "trigger": "$ci->db->update", "contents": "\\$this->db->update(${1:table, \\$data})" },
    { "trigger": "$ci->db->update_batch", "contents": "\\$this->db->update_batch(${1:table_name, array, where_key})" },
    { "trigger": "$ci->db->delete", "contents": "\\$this->db->delete(${1:table_name, where_clause})" },
    { "trigger": "$ci->db->empty_table", "contents": "\\$this->db->empty_table(${1:table_name})" },
    { "trigger": "$ci->db->truncate", "contents": "\\$this->db->truncate(${1:blank or table_name})" },
    { "trigger": "$ci->db->start_cache", "contents": "\\$this->db->start_cache()" },
    { "trigger": "$ci->db->stop_cache", "contents": "\\$this->db->stop_cache()" },
    { "trigger": "$ci->db->flush_cache", "contents": "\\$this->db->flush_cache()" },
    { "trigger": "$ci->db->trans_start", "contents": "\\$this->db->trans_start()" },
    { "trigger": "$ci->db->trans_complete", "contents": "\\$this->db->trans_complete()" },
    { "trigger": "$ci->db->trans_status", "contents": "\\$this->db->trans_status()" },
    { "trigger": "$ci->db->trans_strict", "contents": "\\$this->db->trnas_strict(${1:TRUE/FALSE})" },
    { "trigger": "$ci->db->trans_off", "contents": "\\$this->db->trans_off()" },
    { "trigger": "$ci->db->trans_begin", "contents": "\\$this->db->trans_begin()" },
    { "trigger": "$ci->db->trans_rollback", "contents": "\\$this->db->trans_rollback()" },
    { "trigger": "$ci->db->trans_commit", "contents": "\\$this->db->trans_commit()" },
    { "trigger": "$ci->db->trans_begin", "contents": "\\$this->db->trans_begin()" },
    { "trigger": "$ci->db->list_tables", "contents": "\\$this->db->list_tables()" },
    { "trigger": "$ci->db->table_exists", "contents": "\\$this->db->table_exists(${1:'table_name'})" },
    { "trigger": "$ci->db->list_fields", "contents": "\\$this->db->list_fields()" },
    { "trigger": "$ci->db->field_exists", "contents": "\\$this->db->field_exists(${1:'field_name', 'table_name'})" },
    { "trigger": "$ci->db->field_data", "contents": "\\$this->db->field_data(${1:'table_name'})" },
    { "trigger": "$ci->db->list_tables", "contents": "\\$this->db->list_tables()" },
    { "trigger": "$ci->db->call_function", "contents": "\\$this->db->call_function(${1:'some_function', \\$param1, \\$param2, etc..'})" },
    { "trigger": "$ci->db->field_exists", "contents": "\\$this->db->field_exists(${1:'field_name', 'table_name'})" },
    { "trigger": "$ci->db->cache_on", "contents": "\\$this->db->cache_on()" },
    { "trigger": "$ci->db->cache_off", "contents": "\\$this->db->cache_off()" },
    { "trigger": "$ci->db->cache_delete", "contents": "\\$this->db->cache_delete(${1:'blog', 'comments'})" },
    { "trigger": "$ci->db->cache_delete_all", "contents": "\\$this->db->cache_delete_all()" },
    { "trigger": "$ci->db->cache_delete_all", "contents": "\\$this->db->list_tables()" },
    { "trigger": "$ci->load->dbforge()", "contents": "\\$this->load->dbforge()" },
    { "trigger": "$ci->dbforge->create_database", "contents": "\\$this->dbforge->create_database(${1:'db_name'})" },
    { "trigger": "$ci->dbforge->drop_database", "contents": "\\$this->dbforge->list_tables(${1:'db_name'})" },
    { "trigger": "$ci->dbforge->add_field", "contents": "\\$this->dbforge->add_field(${1:\\$fields})" },
    { "trigger": "$ci->dbforge->add_key", "contents": "\\$this->dbforge->add_key(${1:'field', TRUE/FALSE})" },
    { "trigger": "$ci->dbforge->create_table", "contents": "\\$this->dbforge->create_table(${1:'table_name', TRUE/FALSE})" },
    { "trigger": "$ci->dbforge->drop_table", "contents": "\\$this->dbforge->drop_table(${1:'table_name'})" },
    { "trigger": "$ci->dbforge->rename_table", "contents": "\\$this->dbforge->rename_table(${1:'old_table_name', 'new_table_name'})" },
    { "trigger": "$ci->dbforge->add_column", "contents": "\\$this->dbforge->add_column(${1:'table_name', \\$fields})" },
    { "trigger": "$ci->dbforge->drop_column", "contents": "\\$this->dbforge->drop_column(${1:'table_name', 'column_to_drop'})" },
    { "trigger": "$ci->dbforge->modify_column", "contents": "\\$this->dbforge->modify_column(${1:'table_name', \\$fields})" },
    { "trigger": "$ci->load->dbutil", "contents": "\\$this->load->dbutil()" },
    { "trigger": "$ci->dbutil->list_databases", "contents": "\\$this->dbutil->list_databases()" },
    { "trigger": "$ci->dbutil->database_exists", "contents": "\\$this->dbutil->database_exists()" },
    { "trigger": "$ci->dbutil->optimize_table", "contents": "\\$this->dbutil->optimize_table(${1:'table_name'})" },
    { "trigger": "$ci->dbutil->repair_table", "contents": "\\$this->dbutil->repair_table(${1:'table_name'})" },
    { "trigger": "$ci->dbutil->optimize_database", "contents": "\\$this->dbutil->optimize_database()" },
    { "trigger": "$ci->dbutil->csv_from_result", "contents": "\\$this->dbutil->csv_from_result(${1:\\$query, \\$delimiter, \\$newline})" },
    { "trigger": "$ci->dbutil->xml_from_result", "contents": "\\$this->dbutil->xml_from_result(${1:\\$query, \\$config})" },
    { "trigger": "$ci->dbutil->backup", "contents": "\\$this->dbutil->backup(${1:\\$prefs})" },
    // Array Helper
    { "trigger": "element", "contents": "element(${1:'test', \\$array, return_value})" },
    { "trigger": "random_element", "contents": "random_element(${1:\\$array})" },
    { "trigger": "elements", "contents": "elements(${1:test_array, \\$array, return_value})" },
    // CAPTCHA Helper
    { "trigger": "create_captcha", "contents": "create_captcha(${1:\\$data})" },
    // Cookie Helper
    { "trigger": "set_cookie", "contents": "set_cookie(${1:\\$name, \\$value, \\$expire, \\$domain, \\$path, \\$prefix, \\$secure})" },
    { "trigger": "get_cookie", "contents": "get_cookie(${1:'name', TRUE/FALSE})" },
    { "trigger": "delete_cookie", "contents": "delete_cookie(${1:\\$name, \\$domain, \\$path, \\$prefix})" },
    // Date Helper
    { "trigger": "now", "contents": "now()" },
    { "trigger": "mdate", "contents": "mdate(${1:\\$datestring, \\$time})" },
    { "trigger": "standard_date", "contents": "standard_date({1:\\$format, \\$time})" },
    { "trigger": "local_to_gmt", "contents": "local_to_gmt(${1:\\$time})" },
    { "trigger": "gmt_to_local", "contents": "gmt_to_local(${1:\\$timestamp, \\$timezone, \\$daylight_saving})" },
    { "trigger": "mysql_to_unix", "contents": "mysql_to_unix(${1:\\$mysql_time})" },
    { "trigger": "unix_to_human", "contents": "unix_to_human(${1:\\$now, TRUE, 'eu'})" },
    { "trigger": "human_to_unix", "contents": "element(${1:\\$time})" },
    { "trigger": "timespan", "contents": "timespan(${1:\\$then, \\$now})" },
    { "trigger": "days_in_month", "contents": "days_in_month(${1:month, year})" },
    { "trigger": "timezones", "contents": "timezones(${1:'timezone'})" },
    { "trigger": "timezone_menu", "contents": "timezone_menu(${1:'UTC'})" },
    // Directory Helper
    { "trigger": "directory_map", "contents": "directory_map(${1:'source_directory', depth, TRUE/FALSE})" },
    // Download Helper
    { "trigger": "force_download", "contents": "force_download(${1:\\$name, \\$data})" },
    // Email Helper
    { "trigger": "valid_email", "contents": "valid_email(${1:'email'})" },
    { "trigger": "send_email", "contents": "send_email(${1:'recipient', 'subject', 'message'})" },
    // File Helper
    { "trigger": "read_file", "contents": "read_file(${1:'path'})" },
    { "trigger": "write_file", "contents": "write_file(${1:'path', \\$data, 'write mode'})" },
    { "trigger": "delete_files", "contents": "delete_files(${1:'path', FALSE/TRUE})" },
    { "trigger": "get_filenames", "contents": "get_filenames(${1:path/to/directory/})" },
    { "trigger": "get_dir_file_info", "contents": "get_dir_file_info(${1:'path/to/directory/', \\$top_level_only = TRUE})" },
    { "trigger": "get_file_info", "contents": "get_file_info(${1:'path/to/file', \\$file_information})" },
    { "trigger": "get_mime_by_extension", "contents": "get_mime_by_extension(${1:'file'})" },
    { "trigger": "symbolic_permissions", "contents": "symbolic_permissions(${1:\\$perms})" },
    { "trigger": "octal_permissions", "contents": "octal_permissions(${1:\\$perms})" },
    // Form Helper
    { "trigger": "form_open", "contents": "form_open(${1:'email/send', \\$attributes, \\$hidden})" },
    { "trigger": "form_open_multipart", "contents": "form_open_multipart(${1:'email/send', \\$attributes, \\$hidden})" },
    { "trigger": "form_hidden", "contents": "form_hidden(${1:\\$data})" },
    { "trigger": "form_input", "contents": "form_input(${1:\\$data})" },
    { "trigger": "form_password", "contents": "form_password(${1:\\$data}))" },
    { "trigger": "form_upload", "contents": "form_upload(${1:\\$data}))" },
    { "trigger": "form_textarea", "contents": "form_textarea(${1:\\$data}))" },
    { "trigger": "form_dropdown", "contents": "form_dropdown(${1:'field_name', \\$options, 'selected value', \\$js})" },
    { "trigger": "form_multiselect", "contents": "form_multiselect(${1:'field_name', \\$options, 'selected value', \\$js})" },
    { "trigger": "form_fieldset", "contents": "form_fiedlset(${1:'legend', \\$attributes})" },
    { "trigger": "form_fieldset_close", "contents": "form_fieldset_close(${1:\\$string})" },
    { "trigger": "form_checkbox", "contents": "form_checkbox(${1:'name', 'value', TRUE/FALSE, \\$js})" },
    { "trigger": "form_radio", "contents": "form_radio(${1:'name', 'value', TRUE/FALSE, \\$js})" },
    { "trigger": "form_submit", "contents": "form_submit(${1:'name', 'value'})" },
    { "trigger": "form_label", "contents": "form_label(${1:'text', 'for', \\$attributes})" },
    { "trigger": "form_reset", "contents": "form_reset(${1:'name', 'value')" },
    { "trigger": "form_button", "contents": "form_button(${1:\\$data})" },
    { "trigger": "form_close", "contents": "form_close(${1:\\$string})" },
    { "trigger": "form_prep", "contents": "form_prep(${1:\\$string})" },
    { "trigger": "set_value", "contents": "set_value(${'field_name', 'default value'})" },
    { "trigger": "set_select", "contents": "set_select(${1:'menu name', 'value', TRUE/FALSE})" },
    { "trigger": "set_checkbox", "contents": "set_checkbox(${1:'checkbox name', 'value', TRUE/FALSE})" },
    { "trigger": "set_radio", "contents": "set_radio(${1:'radio name', 'value', TRUE/FALSE})" },
    // HTML Helper
    { "trigger": "br", "contents": "br(${1:n})" },
    { "trigger": "heading", "contents": "heading(${1:'text', 1-6, 'attributes'})" },
    { "trigger": "img", "contents": "img(${1:'src', TRUE/FALSE or \\$array})" },
    { "trigger": "link_tag", "contents": "link_tag(${1:\\$array})" },
    { "trigger": "nbs", "contents": "nbs(${1:n})" },
    { "trigger": "ol", "contents": "ol(${1:\\$list, \\$attributes})" },
    { "trigger": "ul", "contents": "ul(${1:\\$list, \\$attributes})" },
    { "trigger": "meta", "contents": "meta(${1:\\$array})" },
    { "trigger": "doctype", "contents": "doctype(${1:'html5'})" },
    // Inflector Helper
    { "trigger": "singular", "contents": "singular(${1:\\$word})" },
    { "trigger": "plural", "contents": "plural(${1:\\$word}, TRUE/FALSE)" },
    { "trigger": "camelize", "contents": "camelize(${1:\\$word})" },
    { "trigger": "underscore", "contents": "underscore(${1:\\$word})" },
    { "trigger": "humanize", "contents": "humanize(${1:\\$word})" },
    // Language Helper
    { "trigger": "lang", "contents": "lang(${1:'language line', 'element id'})" },
    // Number Helper
    { "trigger": "byte_format", "contents": "byte_format(${1:n, precision})" },
    // Path Helper
    { "trigger": "set_realpath", "contents": "set_realpath(${1:\\$directory, TRUE/FALSE})" },
    // Security Helper
    { "trigger": "xss_clean", "contents": "xss_clean()" },
    { "trigger": "sanitize_filename", "contents": "sanitize_filename()" },
    { "trigger": "do_hash", "contents": "do_hash(${1:\\$string, sha1/md5})" },
    { "trigger": "strip_image_tags", "contents": "strip_image_tags(${1:\\$string})" },
    { "trigger": "encode_php_tags", "contents": "encode_php_tags(${1:\\$string})" },
    // Smiley Helper. Really?
    { "trigger": "get_clickable_smileys", "contents": "get_clickable_smileys(${1:'url', ''})" },
    { "trigger": "smiley_js", "contents": "smiley_js()" },
    { "trigger": "parse_smileys", "contents": "parse_smileys(${1:\\$string, url})" },
    // String Helper
    { "trigger": "random_string", "contents": "random_string(${1:type, length})" },
    { "trigger": "increment_string", "contents": "increment_string(${1:'file', delimiter})" },
    { "trigger": "alternator", "contents": "alternator(${1:'one', 'two', 'three', 'four', 'five'})" },
    { "trigger": "repeater", "contents": "repeater(${1:\\$string, num})" },
    { "trigger": "reduce_double_slashes", "contents": "reduce_double_slashes(${1:\\$string})" },
    { "trigger": "trim_slashes", "contents": "trim_slashes(${1:\\$string})" },
    { "trigger": "reduce_multiples", "contents": "reduce_multiples(${1:\\$string, char, TRUE/FALSE})" },
    { "trigger": "quotes_to_entities", "contents": "quotes_to_entities(${1:\\$string})" },
    { "trigger": "strip_quotes", "contents": "strip_quotes(${1:\\$string})" },
    // Text Helper
    { "trigger": "word_limiter", "contents": "word_limiter(${1:\\$string, num})" },
    { "trigger": "character_limiter", "contents": "character_limiter(${1:\\$string, num})" },
    { "trigger": "ascii_to_entities", "contents": "ascii_to_entities(${1:\\$string})" },
    { "trigger": "entities_to_ascii", "contents": "entities_to_ascii(${1:\\$string})" },
    { "trigger": "convert_accented_characters", "contents": "convert_accented_characters(${1:\\$string})" },
    { "trigger": "word_censor", "contents": "word_censor(${1:\\$string, disallowed_words_array, replacement})" },
    { "trigger": "highlight_code", "contents": "highlight_code(${1:\\$string})" },
    { "trigger": "highlight_phrase", "contents": "highlight_phrase(${1:\\$string, 'highlighted phrase', 'opening tag', 'closing tag'})" },
    { "trigger": "word_wrap", "contents": "word_wrap(${1:\\$string, num})" },
    { "trigger": "ellipsize", "contents": "ellipsize(${1:\\$string, number_of_chars, start_of_ellipsis})" },
    // Typography Helper
    { "trigger": "auto_typography", "contents": "auto_typography(${1:\\$string})" },
    { "trigger": "nl2br_except_pre", "contents": "nl2br_except_pre(${1:\\$string})" },
    // URL Helper
    { "trigger": "site_url", "contents": "site_url(${1:'${2:base_url}'})" },
    { "trigger": "base_url", "contents": "base_url(${1:'${2:base_url}'})" },
    { "trigger": "current_url", "contents": "current_url()" },
    { "trigger": "uri_string", "contents": "uri_string()" },
    { "trigger": "index_page", "contents": "index_page()" },
    { "trigger": "anchor", "contents": "anchor(${1:uri_segments, text, attributes})" },
    { "trigger": "anchor_popup", "contents": "anchor_popup(${1:uri_segments, text, attributes})" },
    { "trigger": "mailto", "contents": "mailto(${1:'email', 'text'})" },
    { "trigger": "safe_mailto", "contents": "safe_mailto(${1:'email', 'text'})" },
    { "trigger": "auto_link", "contents": "auto_link(${1:\\$string, 'url or email', TRUE/FALSE})" },
    { "trigger": "url_title", "contents": "url_title(${1:\\$string, 'delimiter', TRUE/FALSE})" },
    { "trigger": "prep_url", "contents": "prep_url(${1:\\$url})" },
    { "trigger": "redirect", "contents": "redirect(${1:'url', 'location_or_refresh', response_code})" },
    // XML Helper
    { "trigger": "xml_convert", "contents": "xml_convert(${1:\\$string})" }

  ]
}